// hangman.cpp
// Hangman game illustrates string library functions, 
// character arrays, arrays of pointers, etc.
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <fstream>

using namespace std;

// Prototype
int processGuess(char* word, char* targetWord, char guess);

// Define an array of strings (since a string is just a char array)
//  and since string are just char *'s, we really want an array of char *'s
const char *wordBank[] = {"computer","president","trojan","program","coffee",
			  "library","football","popcorn","science","engineer"};

const int numWords = 10;

int main()
{
  srand(time(0));
  char guess;
  bool wordGuessed = false;
  int numTurns = 10;

  // Pick a random word from the wordBank
  char* targetWord = (char*)wordBank[rand()%10];

  // More initialization code as needed
  char word[80];  // a blank array to use to build up the answer
                  // It should be initialized with *'s and then
                  //  change them to the actual letters when the 
                  //  user guesses the letter
	int count = 0;
	int length = strlen(targetWord);
	for (int i = 0; i < length; i++)
	{
		word[i] = '*';
	}

	while (strcmp (word, targetWord) != 0 and numTurns > 0)
	{
		cout << "Current word: " << word << endl;
		cout << numTurns << " turns remain...Enter a letter to guess:\n";
		cin >> guess;
		cout << endl;
		count = processGuess(word, targetWord, guess);
		if (count == 0)
		{
			numTurns --;
		}//end of if
	}//end of while	




  
  // An individual game continues until a word
  //  is guessed correctly or 10 turns have elapsed




  // Print out end of game status
	if (strcmp (word, targetWord) == 0)
	{
		cout << "The word was: " << targetWord << ". You win!" << endl;
	}
	else if (numTurns == 0)
	{
		cout << "You ran out of turns... You lose." << endl;
	}
    
  return 0;
}

// Given the current version of the word, target/selected word, and
// the character that the user just guessed, change the word to 
// "turn on" any occurrences the guess character and return a count
// of how many occurrences of 'guess' were found
int processGuess(char* word, char* targetWord, char guess)
{
	char* status;
	int count = 0;
	while (status != '\0')
	{
		status = strchr(targetWord, guess);
		while (status != '\0')
		{
			word[status-targetWord] = guess;
			count ++;
			status = strchr (status+1, guess);
		}//end of while		
		
	}// end of while
return count;
}

